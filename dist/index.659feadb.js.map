{"mappings":"AAAA,IAAI,QAAQ;IACV,OAAO,EAAE;AACX;AACA,kBAAkB;AAElB,MAAM,mBAAmB,IAAM;IAC7B,MAAM,aAAa,KAAK,SAAS,CAAC;IAClC,aAAa,OAAO,CAAC,QAAQ;AAC/B;AACA,kDAAkD;AAElD,MAAM,aAAa,CAAC,MAAQ;IAC1B,OAAO,CAAC,gDACY,EAAE,IAAI,IAAI,CAAC,gEAET,EAAE,IAAI,IAAI,CAAC,uEAC4B,EAAE,IAAI,EAAE,CAAC,+JAIZ,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,cAAc,GAAG,YAAY,EAAE,CAAC,oFAIpG,CAAC;AACT;AACA,qBAAqB;AAErB,MAAM,iBAAiB,IAAM;IAC3B,SAAS,cAAc,CAAC,YAAY,SAAS,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC;AACnF;AACA,2BAA2B;AAE3B,MAAM,YAAY,CAAC,GAAG,IAAM;IAC1B,MAAM,UAAU,EAAE,cAAc,GAAG,IAAI,CAAC;IACxC,MAAM,UAAU,EAAE,cAAc,GAAG,IAAI,CAAC;IAExC,OAAO,UAAU;AACnB;AACA,cAAc;AAEd,MAAM,gBAAgB,CAAC,QAAU;IAC/B,IAAI,KAAK,MAAM,MAAM,CAAC,YAAY,CAAC;IACnC,IAAG,IAAI;QACL,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC,OAAS;YAC3C,OAAO,KAAK,EAAE,IAAI;QAClB;QACA;QACA;IACF,CAAC;IACD,IAAI,aAAa,MAAM,MAAM,CAAC,YAAY,CAAC;IAC3C,IAAG,YAAY;QACb,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,OAAS;YACtC,IAAG,KAAK,EAAE,IAAI,YAAY;gBACxB,KAAK,cAAc,GAAG,MAAM,MAAM,CAAC,OAAO;gBAC1C,OAAO;YACT,OACK,OAAO;QACd;QACA,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC;QAC/B;QACA;IACF,CAAC;AACH;AACA,6CAA6C;AAE7C,MAAM,WAAW,IAAM;IACrB,OAAO,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,CAAC;AACzH;AACA,sBAAsB;AAEtB,MAAM,aAAa,CAAC,IAAM;IACxB,MAAM,KAAK,CAAC,IAAI,CAAC;IACjB;IACA;AACF;AACA,8DAA8D;AAE9D,MAAM,aAAa,IAAM;IACvB,SAAS,cAAc,CAAC,SAAS,KAAK,GAAG;AAC3C;AACA,0BAA0B;AAE1B,MAAM,0BAA0B,IAAM;IACpC,MAAM,QAAQ,CAAC;IACf,MAAM,IAAI,GAAG,SAAS,cAAc,CAAC,SAAS,KAAK;IACnD,MAAM,IAAI,GAAG,IAAI,OAAO,kBAAkB;IAC1C,MAAM,EAAE,GAAG;IACX,MAAM,cAAc,GAAG,KAAK;IAC5B,WAAW;IACX;AACF;AACA,kFAAkF;AAElF,MAAM,YAAY,IAAM;IACtB,MAAM,aAAa,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC;IAEnD,IAAG,YACD,QAAQ;IAGV;AACF;AACA,sEAAsE;AAEtE,MAAM,UAAU,IAAM;IACpB;IAEA,SAAS,cAAc,CAAC,OAAO,gBAAgB,CAAC,SAAS;IACzD,SAAS,cAAc,CAAC,YAAY,gBAAgB,CAAC,SAAS;AAChE;AACA,2BAA2B;AAE3B,WACA,oBAAoB","sources":["js/todolist.js"],"sourcesContent":["let state = {\r\n  tasks: [],\r\n};\r\n//create an object\r\n\r\nconst saveLocalStorage = () => {\r\n  const stringTask = JSON.stringify(state);\r\n  localStorage.setItem('data', stringTask);\r\n}\r\n//convert object to string and add data to storage\r\n\r\nconst taskActual = (val) => {\r\n  return `<div class=\"task-block\">\r\n    <div class=\"task\">${val.task}</div>\r\n    <div class=\"task-content\">\r\n      <div class=\"date\">${val.date}</div>\r\n      <button type=\"reset\" class=\"button-reset\" delete-task-id=${val.id}>\r\n        <span class=\"hidden\">Кнопка для удаления задачи</span>\r\n      </button>\r\n      <label>\r\n        <input type=\"checkbox\" class=\"checkbox\" checkbox-id=${val.id} ${val.checkBoxStatus ? 'checked' : ''}>\r\n        <span class=\"fake-checkbox\"></span>\r\n      </label>\r\n    </div>\r\n  </div>`;\r\n}\r\n//adding valid layout\r\n\r\nconst renderTaskList = () => {\r\n  document.getElementById('taskList').innerHTML = state.tasks.map(taskActual).join('');\r\n}\r\n//rendering of actual tasks\r\n\r\nconst sortTasks = (a, b) => {\r\n  const aNumber = a.checkBoxStatus ? 1 : 0;\r\n  const bNumber = b.checkBoxStatus ? 1 : 0;\r\n\r\n  return aNumber - bNumber;\r\n}\r\n//task sorting\r\n\r\nconst deleteOrCheck = (event) => {\r\n  let id = event.target.getAttribute('delete-task-id');\r\n  if(id) {\r\n    state.tasks = state.tasks.filter((task) => {\r\n    return task.id != id;\r\n    });\r\n    saveLocalStorage();\r\n    renderTaskList();\r\n  };\r\n  let checkBoxId = event.target.getAttribute('checkbox-id');\r\n  if(checkBoxId) {\r\n    state.tasks = state.tasks.map((task) => {\r\n      if(task.id == checkBoxId) {\r\n        task.checkBoxStatus = event.target.checked;\r\n        return task;\r\n      }\r\n      else return task;\r\n    });\r\n    state.tasks = state.tasks.sort(sortTasks);\r\n    saveLocalStorage();\r\n    renderTaskList();\r\n  };\r\n}\r\n//operation of the delete button and checkbox\r\n\r\nconst createId = () => {\r\n  return `${Math.round(Math.random() * 10000)}-${Math.round(Math.random() * 10000)}-${Math.round(Math.random() * 10000)}`;\r\n}\r\n//creating a unique id\r\n\r\nconst addToArray = (f) => {\r\n  state.tasks.push(f);\r\n  saveLocalStorage();\r\n  renderTaskList();\r\n}\r\n//adding an object to an array, add data to storage and render\r\n\r\nconst clearInput = () => {\r\n  document.getElementById('input').value = \"\";\r\n}\r\n//clearing the input field\r\n\r\nconst saveTaskAndDateToObject = () => {\r\n  const field = {};\r\n  field.task = document.getElementById('input').value;\r\n  field.date = new Date().toLocaleDateString();\r\n  field.id = createId();\r\n  field.checkBoxStatus = false;\r\n  addToArray(field);\r\n  clearInput();\r\n}\r\n//creating an object and his fields, adding to the array, clearing the input field\r\n\r\nconst initState = () => {\r\n  const localState = JSON.parse(localStorage.getItem('data'));\r\n\r\n  if(localState) {\r\n    state = localState;\r\n  }\r\n\r\n  renderTaskList();\r\n}\r\n//initialization of stored data, converting to an object and rendering\r\n\r\nconst startUp = () => {\r\n  initState();\r\n\r\n  document.getElementById('add').addEventListener('click', saveTaskAndDateToObject);\r\n  document.getElementById('taskList').addEventListener('click', deleteOrCheck);\r\n}\r\n//main function declaration\r\n\r\nstartUp();\r\n//main function call"],"names":[],"version":3,"file":"index.659feadb.js.map","sourceRoot":"/__parcel_source_root/"}